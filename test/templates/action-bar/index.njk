{% extends "layout.njk" %}
{% from "./../format.njk" import format %}
{% from "../button/component.njk" import button %}
{% from "./component.njk" import action_bar %}
{% from "../menu/component.njk" import menu %}
{% from "./../popover/component.njk" import popover_body %}
{% import "./../utils.njk" as utils %}

<!-- include add'tl css from src/styles/, e.g., ['helpers','components/button'] -->
{% set css_deps = ['fonts','icons','components/button', 'components/menu', 'components/popover'] %}

{% block content %}
<style media="screen">
    .fd-action-bar {
        margin: 0 20px;
    }
</style>

{%- set primarybtn %}{{
    button(
            { label: 'Button' },
            modifier={block: [ 'main', 'l'] }
        )
}}{%- endset %}

{%- set secbtn %}{{
  button(
          { label: 'Button' },
          modifier={ block: ['primary', 'l'] }
      )
}}{%- endset %}


{%- set contextmenu %}
{%- set _id = utils.id() %}
<div class="fd-popover">
    {{ button({ icon: "vertical-grip" }, modifier={ block: ["secondary"] }, aria={ controls: _id, haspopup: true, expanded: false, label: "More" }) | indent(4) }}
    {{  popover_body(properties={
            id: _id,
            body: menu(properties={
            items: [
                { "label": "Option 1" },
                { "label": "Option 2" },
                { "label": "Option 3" },
                { "label": "Option 4" }
              ]
            })
        },
        classes="contextual-menu"
        ) | indent(4)
    }}
</div>
{%- endset %}

<!-- output the component example and the code snippet -->

<h1>action-bar with and without description</h1>

{% set example %}
{{  action_bar(
        properties={
            title: "Action Bar with description and back button",
            description: data.properties.description,
            actions: {
                properties: {
                    items: [secbtn,primarybtn]
                }
            },
            back_button: true
        },
        modifier={
            block: []
        },
        state={},
        aria={}
    )
}}

{{  action_bar(
        properties={
            title: "Action Bar with no description",
            actions: {
                properties: {
                    items: [secbtn,primarybtn]
                }
            },
            back_button: true
        },
        modifier={
            block: []
        },
        state={},
        aria={}
    )
}}

{{  action_bar(
        properties={
            title: "Action Bar with no back button",
            actions: {
                properties: {
                    items: [secbtn,primarybtn]
                }
            }
        },
        modifier={
            block: []
        },
        state={},
        aria={}
    )
}}
</div>

{% endset %}


{{ format(example) }}
<br><br>

<h2>Actions Hidden</h2>
<div id="toggles">

<button type="button" id="button">Simulate dirty state</button>
<br>

    <!-- output the component example and the code snippet -->
    {% set example %}
    {{  action_bar(
            properties={
                navigation: backbtn,
                title: data.properties.title,
                actions: {
                    properties: {
                        items: [secbtn,primarybtn]
                    },
                    aria: {
                        hidden: true
                    }
                }
            },
            modifier={
                block: []
            },
            state={},
            aria={}
        )
    }}

    {% endset %}
    {{ format(example) }}
</div>
    <script type="text/javascript">
        var button = document.getElementById("button");
        var toggles = document.getElementById("toggles");
        var actions = toggles.querySelectorAll(".fd-action-bar__actions");
        function doDirty() {
            for (var i = 0; i < actions.length; i++) {
                var item = actions[i];
                if(item.hasAttribute('aria-hidden')) {
                    item.setAttribute('aria-hidden',false);
                } else {
                    var classes = item.getAttribute("class");
                    classes.replace('is-disabled','');
                    item.setAttribute("class",classes.replace('is-disabled',''));
                }
            }
        }
        button.addEventListener('click',function() {
            doDirty();
        })
    </script>

{% endblock %}
