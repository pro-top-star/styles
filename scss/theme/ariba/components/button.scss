@import "./../settings";
@import "./../../../mixins";
@import "./../../../functions";
@import "./../../../components/mixins";
@import "./../../../icons/mixins";

//Adding setting for 20px; into default map. Required by Round Button --xl
$fd-type-ariba: (
      "22":#{20/$fd-type--base}rem 26/20 "body" reg none, //20/26
);

$fd-type: map-merge($fd-type , $fd-type-ariba);

/*!
.fd-button+( (--small | --large), --icon, --text, --link, --action-bar)+( (.is-disabled | [aria-disabled=true]) | (.is-selected | [aria-selected=true] | (.is-pressed | [aria-pressed=true]))
*/

$block: #{$fd-namespace}-button;
.#{$block} {
  //SETTINGS
  //SIZES â€” size: height "text size" "icon size"
  $fd-button-sizes: (
      "default": $fd-forms-height "0" "l", //36px
      "compact": fd-space(8) "0" "m", //32px
      "xs": fd-space(6) "-2" "s", //24px
      "s": fd-space(7) "0" "m", //28px
      "l": fd-space(10) "1" "l", //40px
      "xl": fd-space(11) "1" "xl", //44px
  ) !default;

  //default
  //$fd-button-color: $fd-link-color !default;
  //$fd-button-color--inverse: fd-color("text-inverse", 1) !default;
  //$fd-button-color--hover: $fd-link-color--hover !default;
  //$fd-button-color--pressed: $fd-link-color--pressed !default;
  //$fd-button-color--active: $fd-link-color--active !default;
  //$fd-button-background-color: fd-color("background", 2) !default;

  //anim
  $fd-button-transition-params: $fd-animation--speed ease-in !default;

  //spacing
  $fd-button-padding-x: fd-space(3)/1.2 !default;

  //BASE
  //set all reset and baseline block styles
  $defaults: map-get($fd-button-sizes, "default");
  @at-root {
    .#{$block}, [class*="#{$block}--"] {
      @include fd-type(nth($defaults, 2));
      border-radius: 3px;
      padding-left: $fd-button-padding-x * 2.4;
      padding-right: $fd-button-padding-x * 2.4;
      &[class*="ariba-icon"]::before{
        margin-top: -6px;
      }
      &.#{$block}--round {
        @include fd-type("1");
        border-radius: 50%;
        padding: 0px !important;
        height: nth($defaults, 1) + 12;
        max-height: nth($defaults, 1) + 12;
        min-width: nth($defaults, 1) + 12;
      }
      &.--icon-only {
        padding-left: $fd-button-padding-x * 1.1;
        padding-right: $fd-button-padding-x * 1.1;
      }
    }
    &--main,
    &--action-bar {
      font-weight: 700;
    }
    .rtl .#{$block}, .rtl [class*="#{$block}--"] {
      &::before {
        margin-left: fd-space(2);
        margin-right: 0px;
      }
    }
  }

  &--negative {
    //color: $fd-color--error;
    border-color: $fd-color--error;
    &:active,
    &.is-active,
    &[aria-selected="true"],
    &.is-selected,
    &[aria-pressed="true"],
    &.is-pressed {
      background-color: fd-color-darkest($fd-color--error);
      border-color: fd-color-darkest($fd-color--error);
      //color: fd-color(text, 4);
    }
  }
  //SIZES
  @each $key, $list in $fd-button-sizes {
    @if $key != "default" {
      &--#{$key} {
        @include fd-type(nth($list, 2));
        @include fd-icon-size(nth($list, 3), "before");
        @include fd-icon-size(nth($list, 3), "after");
        height: nth($list,1);
        max-height: nth($list, 1);
        min-width: nth($list, 1);
        @if $key == "xs" {
          padding-left: $fd-button-padding-x * 1.2;
          padding-right: $fd-button-padding-x * 1.2;
          border-radius: 2px;
        }
        @if $key == "s" {
          padding-left: $fd-button-padding-x * 1.6;
          padding-right: $fd-button-padding-x * 1.6;
          border-radius: 2px;
        }
        @if $key == "compact" {
          padding-left: $fd-button-padding-x * 2;
          padding-right: $fd-button-padding-x * 2;
          border-radius: 3px;
        }
        @if $key == "l" {
          padding-left: $fd-button-padding-x * 2.8;
          padding-right: $fd-button-padding-x * 2.8;
          border-radius: 3px;
        }
        @if $key == "xl" {
          padding-left: $fd-button-padding-x * 3.2;
          padding-right: $fd-button-padding-x * 3.2;
          border-radius: 3px;
        }
      }
      &--#{$key}.#{$block}--round {
        @if $key == "xs" {
          @include fd-type("0");
          height: nth($list,1) + 12;
          max-height: nth($list, 1) + 12;
          min-width: nth($list, 1) + 12;
        }
        @if $key == "s" {
          @include fd-type("1");
          height: nth($list,1) + 16;
          max-height: nth($list, 1) + 16;
          min-width: nth($list, 1) + 16;
        }
        @if $key == "l" {
          @include fd-type("2");
          height: nth($list,1) + 12;
          max-height: nth($list, 1) + 12;
          min-width: nth($list, 1) + 12;
        }
        @if $key == "xl" {
          @include fd-type("22");
          height: nth($list,1) + 12;
          max-height: nth($list, 1) + 12;
          min-width: nth($list, 1) + 12;
        }
      }

      &--#{$key}.--icon-only {
        @if $key == "xs" {
          padding-left: $fd-button-padding-x * 0.6;
          padding-right: $fd-button-padding-x * 0.6;
        }
        @if $key == "s" {
          padding-left: $fd-button-padding-x * 0.7;
          padding-right: $fd-button-padding-x * 0.7;
        }
        @if $key == "compact" {
          padding-left: $fd-button-padding-x * 0.9;
          padding-right: $fd-button-padding-x * 0.9;
        }
        @if $key == "l" {
          padding-left: $fd-button-padding-x * 1.2;
          padding-right: $fd-button-padding-x * 1.2;
        }
        @if $key == "xl" {
          padding-left: $fd-button-padding-x * 1.4;
          padding-right: $fd-button-padding-x * 1.4;
        }
      }

    }
  }
}
